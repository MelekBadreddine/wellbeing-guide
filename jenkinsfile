pipeline {
    agent any

    environment {
        AZURE_OAI_KEY = credentials('azure-openai-key')
        AZURE_CREDENTIALS = credentials('azure-service-principal')
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build App') {
            steps {
                sh '''
                    flutter pub get
                    flutter build apk
                '''
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    docker.withRegistry('https://registry.hub.docker.com', 'docker-hub-credentials') {
                        def app = docker.build("melekbadreddine/chatbot:${env.BUILD_NUMBER}", "./chatbot")
                        app.push()
                    }
                }
            }
        }

        stage('Deploy to AKS') {
            steps {
                script {
                    def manifests = """
                        apiVersion: apps/v1
                        kind: Deployment
                        metadata:
                          name: flask-app
                        spec:
                          replicas: 2
                          selector:
                            matchLabels:
                              app: flask-app
                          template:
                            metadata:
                              labels:
                                app: flask-app
                            spec:
                              containers:
                              - name: flask
                                image: melekbadreddine/chatbot:${env.BUILD_NUMBER}
                                env:
                                - name: AZURE_OAI_KEY
                                  value: ${env.AZURE_OAI_KEY}
                                ports:
                                - containerPort: 5000
                        ---
                        apiVersion: v1
                        kind: Service
                        metadata:
                          name: flask-app-service
                        spec:
                          selector:
                            app: flask-app
                          ports:
                          - protocol: TCP
                            port: 80
                            targetPort: 5000
                          type: LoadBalancer
                    """

                    def credentials = "${env.AZURE_CREDENTIALS}"
                    sh "kubectl apply -f - --record --kubeconfig=\$(echo '$credentials' | base64 -d)"
                }
            }
        }
    }
}